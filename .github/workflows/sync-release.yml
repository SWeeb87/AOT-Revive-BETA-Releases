name: Sync Latest Release to Another Repo

on:
  release:
    types: [published, edited] # Triggera il workflow su nuove release o modifiche a release esistenti
  workflow_dispatch: # Permette di avviare manualmente il workflow

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch release details from source
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Variabili
          SOURCE_OWNER="SWeeb87"
          SOURCE_REPO="AOT-Revive-BETA-Releases"

          # Ottieni i dettagli dell'ultima release pubblicata
          RELEASE_DATA=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$SOURCE_OWNER/$SOURCE_REPO/releases/latest")

          # Debug: Stampiamo la risposta della API per vedere cosa contiene
          echo "Release Data: $RELEASE_DATA"

          # Estrai i dati richiesti
          export RELEASE_TAG=$(echo "$RELEASE_DATA" | jq -r '.tag_name')
          export RELEASE_NAME=$(echo "$RELEASE_DATA" | jq -r '.name')
          export RELEASE_BODY=$(echo "$RELEASE_DATA" | jq -r '.body')

          # Salva gli URL degli asset in un file temporaneo
          echo "$RELEASE_DATA" | jq -r '.assets[].browser_download_url' > asset_urls.txt

          echo "Tag della release: $RELEASE_TAG"
          echo "Nome della release: $RELEASE_NAME"
          echo "Corpo della release: $RELEASE_BODY"

      - name: Sync latest release to destination
        env:
          DESTINATION_PAT: ${{ secrets.DESTINATION_PAT }}
        run: |
          # Variabili
          DEST_OWNER="SWeeb87"
          DEST_REPO="AOT-Revive-Cadet-Beta"

          # Ottieni ID della release nella destinazione (se esiste)
          RELEASE_ID=$(curl -s \
            -H "Authorization: Bearer $DESTINATION_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$DEST_OWNER/$DEST_REPO/releases" \
            | jq -r --arg tag "$RELEASE_TAG" '.[] | select(.tag_name == $tag) | .id')

          # Aggiungi un controllo se la release esiste gi√†
          if [ -z "$RELEASE_ID" ]; then
            echo "La release non esiste nella destinazione. Creazione..."
            
            # Debug: Stampiamo la risposta per la creazione della release
            NEW_RELEASE_DATA=$(curl -s \
              -X POST \
              -H "Authorization: Bearer $DESTINATION_PAT" \
              -H "Content-Type: application/json" \
              -d '{
                "tag_name": "'"$RELEASE_TAG"'",
                "target_commitish": "main",
                "name": "'"$RELEASE_NAME"'",
                "body": "'"$RELEASE_BODY"'",
                "draft": false,
                "prerelease": false
              }' \
              "https://api.github.com/repos/$DEST_OWNER/$DEST_REPO/releases")

            echo "New Release Response: $NEW_RELEASE_DATA" # Aggiungi il debug

            # Estrai l'ID della nuova release
            RELEASE_ID=$(echo "$NEW_RELEASE_DATA" | jq -r '.id')
          else
            echo "La release esiste nella destinazione. Aggiornamento..."
            curl -s \
              -X PATCH \
              -H "Authorization: Bearer $DESTINATION_PAT" \
              -H "Content-Type: application/json" \
              -d '{
                "name": "'"$RELEASE_NAME"'",
                "body": "'"$RELEASE_BODY"'"
              }' \
              "https://api.github.com/repos/$DEST_OWNER/$DEST_REPO/releases/$RELEASE_ID"
          fi

          # Aggiungi o aggiorna asset nella release della destinazione
          while read -r FILE_URL; do
            ASSET_NAME=$(basename "$FILE_URL")
            
            # Elimina l'asset nella destinazione se esiste
            ASSET_ID=$(curl -s \
              -H "Authorization: Bearer $DESTINATION_PAT" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$DEST_OWNER/$DEST_REPO/releases/$RELEASE_ID/assets" \
              | jq -r --arg name "$ASSET_NAME" '.[] | select(.name == $name) | .id')

            if [ -n "$ASSET_ID" ]; then
              echo "Elimino asset esistente: $ASSET_NAME"
              curl -s -X DELETE \
                -H "Authorization: Bearer $DESTINATION_PAT" \
                "https://api.github.com/repos/$DEST_OWNER/$DEST_REPO/releases/assets/$ASSET_ID"
            fi

            # Scarica il file dalla sorgente e caricalo nella destinazione
            echo "Scarico e carico asset: $ASSET_NAME"
            curl -sL "$FILE_URL" -o "$ASSET_NAME"
            curl -s \
              -X POST \
              -H "Authorization: Bearer $DESTINATION_PAT" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$ASSET_NAME" \
              "https://uploads.github.com/repos/$DEST_OWNER/$DEST_REPO/releases/$RELEASE_ID/assets?name=$ASSET_NAME"
          done < asset_urls.txt
